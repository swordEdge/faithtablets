"use strict";!function(factory){"object"==typeof module&&module.exports?module.exports=factory:factory(Highcharts)}(function(Highcharts){var H,drawPoint,each,extend,isArray,isNumber,isObject,Series,isRectanglesIntersecting,intersectsAnyWord,archimedeanSpiral,squareSpiral,rectangularSpiral,getRandomPosition,getScale,getPlayingField,getRotation,outsidePlayingField,intersectionTesting,updateFieldBoundaries,wordCloudOptions,wordCloudSeries,wordCloudPoint,draw=function(){var isFn=function(x){return"function"==typeof x},draw=function draw(params){var point=this,graphic=point.graphic,animate=params.animate,attr=params.attr,onComplete=params.onComplete,css=params.css,group=params.group,renderer=params.renderer,shape=params.shapeArgs,type=params.shapeType;point.shouldDraw()?(graphic||(point.graphic=graphic=renderer[type](shape).add(group)),graphic.css(css).attr(attr).animate(animate,undefined,onComplete)):graphic&&graphic.animate(animate,undefined,function(){point.graphic=graphic=graphic.destroy(),isFn(onComplete)&&onComplete()}),graphic&&graphic.addClass(point.getClassName(),!0)};return draw}();drawPoint=draw,each=(H=Highcharts).each,extend=H.extend,isArray=H.isArray,isNumber=H.isNumber,isObject=H.isObject,Series=H.Series,isRectanglesIntersecting=function isRectanglesIntersecting(r1,r2){return!(r2.left>r1.right||r2.right<r1.left||r2.top>r1.bottom||r2.bottom<r1.top)},intersectsAnyWord=function intersectsAnyWord(point,points){var rect2,intersects=!1,rect1=point.rect;return point.lastCollidedWith&&(rect2=point.lastCollidedWith.rect,(intersects=isRectanglesIntersecting(rect1,rect2))||delete point.lastCollidedWith),intersects||(intersects=!!H.find(points,function(p){var result;return rect2=p.rect,(result=isRectanglesIntersecting(rect1,rect2))&&(point.lastCollidedWith=p),result})),intersects},archimedeanSpiral=function archimedeanSpiral(attempt,params){var field=params.field,result=!1,maxDelta=field.width*field.width+field.height*field.height,t=.2*attempt;return attempt<=1e4&&(result={x:t*Math.cos(t),y:t*Math.sin(t)},Math.min(Math.abs(result.x),Math.abs(result.y))<maxDelta||(result=!1)),result},squareSpiral=function squareSpiral(attempt){var k=Math.ceil((Math.sqrt(attempt)-1)/2),t=2*k+1,m=Math.pow(t,2),isBoolean=function(x){return"boolean"==typeof x},result=!1;return t-=1,attempt<=1e4&&(isBoolean(result)&&m-t<=attempt&&(result={x:k-(m-attempt),y:-k}),m-=t,isBoolean(result)&&m-t<=attempt&&(result={x:-k,y:m-attempt-k}),m-=t,isBoolean(result)&&(result=m-t<=attempt?{x:m-attempt-k,y:k}:{x:k,y:k-(m-attempt-t)}),result.x*=5,result.y*=5),result},rectangularSpiral=function rectangularSpiral(attempt,params){var result=squareSpiral(attempt,params),field=params.field;return result&&(result.x*=field.ratio),result},getRandomPosition=function getRandomPosition(size){return Math.round(size*(Math.random()+.5)/2)},getScale=function getScale(targetWidth,targetHeight,field){var height=2*Math.max(Math.abs(field.top),Math.abs(field.bottom)),scaleX=1/(2*Math.max(Math.abs(field.left),Math.abs(field.right)))*targetWidth,scaleY=1/height*targetHeight;return Math.min(scaleX,scaleY)},getPlayingField=function getPlayingField(targetWidth,targetHeight){var ratio=targetWidth/targetHeight;return{width:256*ratio,height:256,ratio:ratio}},getRotation=function getRotation(orientations,from,to){var intervals=(to-from)/(orientations-1);return from+Math.floor(Math.random()*orientations)*intervals},outsidePlayingField=function outsidePlayingField(wrapper,field){var rect=wrapper.getBBox(),playingField={left:-field.width/2,right:field.width/2,top:-field.height/2,bottom:field.height/2};return!(playingField.left<rect.x&&playingField.right>rect.x+rect.width&&playingField.top<rect.y&&playingField.bottom>rect.y+rect.height)},wordCloudOptions={animation:{duration:500},borderWidth:0,clip:!(updateFieldBoundaries=function updateFieldBoundaries(field,rectangle){return(!isNumber(field.left)||field.left>rectangle.left)&&(field.left=rectangle.left),(!isNumber(field.right)||field.right<rectangle.right)&&(field.right=rectangle.right),(!isNumber(field.top)||field.top>rectangle.top)&&(field.top=rectangle.top),(!isNumber(field.bottom)||field.bottom<rectangle.bottom)&&(field.bottom=rectangle.bottom),field}),colorByPoint:!0,placementStrategy:"center",rotation:{from:0,orientations:2,to:90},showInLegend:!(intersectionTesting=function intersectionTesting(point,options){for(var placed=options.placed,element=options.element,field=options.field,clientRect=options.clientRect,spiral=options.spiral,attempt=1,delta={x:0,y:0},rect=point.rect=extend({},clientRect);(intersectsAnyWord(point,placed)||outsidePlayingField(element,field))&&!1!==delta;)delta=spiral(attempt,{field:field}),isObject(delta)&&(rect.left=clientRect.left+delta.x,rect.right=rect.left+rect.width,rect.top=clientRect.top+delta.y,rect.bottom=rect.top+rect.height),attempt++;return delta}),spiral:"rectangular",style:{fontFamily:"Impact, sans-serif"},tooltip:{followPointer:!0,pointFormat:'<span style="color:{point.color}">\u25cf</span> {series.name}: <b>{point.weight}</b><br/>'}},wordCloudSeries={animate:Series.prototype.animate,bindAxes:function(){var wordcloudAxis={endOnTick:!1,gridLineWidth:0,lineWidth:0,maxPadding:0,startOnTick:!1,title:null,tickPositions:[]};Series.prototype.bindAxes.call(this),extend(this.yAxis.options,wordcloudAxis),extend(this.xAxis.options,wordcloudAxis)},deriveFontSize:function deriveFontSize(relativeWeight){var maxFontSize=25;return Math.floor(maxFontSize*relativeWeight)},drawPoints:function(){var scale,series=this,hasRendered=series.hasRendered,xAxis=series.xAxis,yAxis=series.yAxis,chart=series.chart,group=series.group,options=series.options,animation=options.animation,renderer=chart.renderer,testElement=renderer.text().add(group),placed=[],placementStrategy=series.placementStrategy[options.placementStrategy],spiral=series.spirals[options.spiral],rotation=options.rotation,weights=series.points.map(function(p){return p.weight}),maxWeight=Math.max.apply(null,weights),field=getPlayingField(xAxis.len,yAxis.len),data=series.points.sort(function(a,b){return b.weight-a.weight});each(data,function(point){var animate,delta,clientRect,relativeWeight=1/maxWeight*point.weight,css=extend({fontSize:series.deriveFontSize(relativeWeight)+"px",fill:point.color},options.style),placement=placementStrategy(point,{data:data,field:field,placed:placed,rotation:rotation}),attr={align:"center",x:placement.x,y:placement.y,text:point.name,rotation:placement.rotation};testElement.css(css).attr(attr),point.clientRect=clientRect=extend({},testElement.element.getBoundingClientRect()),delta=intersectionTesting(point,{clientRect:clientRect,element:testElement,field:field,placed:placed,spiral:spiral}),isObject(delta)?(attr.x+=delta.x,attr.y+=delta.y,extend(placement,{left:attr.x-clientRect.width/2,right:attr.x+clientRect.width/2,top:attr.y-clientRect.height/2,bottom:attr.y+clientRect.height/2}),field=updateFieldBoundaries(field,placement),placed.push(point),point.isNull=!1):point.isNull=!0,animation&&(animate={x:attr.x,y:attr.y},hasRendered?(delete attr.x,delete attr.y):(attr.x=0,attr.y=0)),point.draw({animate:animate,attr:attr,css:css,group:group,renderer:renderer,shapeArgs:undefined,shapeType:"text"})}),testElement=testElement.destroy(),scale=getScale(xAxis.len,yAxis.len,field),series.group.attr({scaleX:scale,scaleY:scale})},hasData:function(){var series=this;return isObject(series)&&!0===series.visible&&isArray(series.points)&&0<series.points.length},placementStrategy:{random:function randomPlacement(point,options){var field=options.field,r=options.rotation;return{x:getRandomPosition(field.width)-field.width/2,y:getRandomPosition(field.height)-field.height/2,rotation:getRotation(r.orientations,r.from,r.to)}},center:function centerPlacement(point,options){var r=options.rotation;return{x:0,y:0,rotation:getRotation(r.orientations,r.from,r.to)}}},pointArrayMap:["weight"],spirals:{archimedean:archimedeanSpiral,rectangular:rectangularSpiral,square:squareSpiral},getPlotBox:function(){var series=this,chart=series.chart,inverted=chart.inverted,xAxis=series[inverted?"yAxis":"xAxis"],yAxis=series[inverted?"xAxis":"yAxis"],width=xAxis?xAxis.len:chart.plotWidth,height=yAxis?yAxis.len:chart.plotHeight;return{translateX:(xAxis?xAxis.left:chart.plotLeft)+width/2,translateY:(yAxis?yAxis.top:chart.plotTop)+height/2,scaleX:1,scaleY:1}}},wordCloudPoint={draw:drawPoint,shouldDraw:function shouldDraw(){return!this.isNull}},H.seriesType("wordcloud","column",wordCloudOptions,wordCloudSeries,wordCloudPoint)});